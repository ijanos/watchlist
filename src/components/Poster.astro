---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import { existsSync } from 'node:fs';
import { writeFile } from 'node:fs/promises';
import omdbkey from "../../res/omdbkey.js";
import { type Movie } from "../data/movies.ts";

interface Props {
   movie: Movie;
}

async function downloadPoster(imdbid: string, path: string) {
  const response = await fetch(`https://www.omdbapi.com/?i=${imdbid}&apikey=${omdbkey}`);
  const movie = await response.json();
  const posterURL = movie["Poster"];

  if (!posterURL || posterURL == "N/A") { return false; }

  const posterResposne = await fetch(posterURL);
  const buffer = Buffer.from(await posterResposne.arrayBuffer());
  await writeFile(path, buffer);
  return true;
}

const { movie } = Astro.props;
const posterImagePath = `posters/${movie.imdbID}.jpg`;

if (!existsSync(posterImagePath)) {
    if(!await downloadPoster(movie.imdbID, posterImagePath)) {
        throw new Error(`Couldn't download poster for ${movie.imdbID}`);
    }
}

const posterImageModule: { default: ImageMetadata } = await import(`../../posters/${movie.imdbID}.jpg`);
const posterImage = posterImageModule.default;
---
<Image
  width=300
  class="w-60 h-auto rounded-lg shadow-xl transition ease-in-out hover:scale-105"
  src={posterImage}
  title={movie.englishTitle}
  alt={`Poster for ${movie.englishTitle}`}
  x-show="$el.dataset.search.includes(search)"
  data-releasedate={movie.releaseDate}
  data-search={`${ movie.englishTitle } ${movie.director.join(" ")} ${ movie.originalTitle || '' }`.toLowerCase()}
  @click={ `showModal(${ movie.index })` }
/>
