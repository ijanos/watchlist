---
import Layout from "../layouts/Layout.astro";
---

<Layout title="not an admin page">
    <div class="flex flex-col space-y-1 bg-amber-200 rounded-lg p-2">
        <div class="flex justify-between flex-wrap">
            <div>
                <label for="omdb-search">imdb id</label>
                <input
                    type="search"
                    size="12"
                    id="omdb-search"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2"
                />
            </div>
            <div>
                <label for="omdb-key">OMDb API Key</label>
                <input
                    type="password"
                    size="4"
                    id="omdb-key"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2"
                />
            </div>
        </div>

        <textarea
            id="textarea"
            name=""
            rows="24"
            readonly
            class="font-mono font-semibold text-lg text-gray-800 rounded-b-md border border-gray-300 bg-gray-50"
            >This is not an admin page, that is just a joke, sorry to dissapoint. Use this page to generate JSON objects for the watchlist.</textarea
        >
    </div>
</Layout>

<script>
    const output = document.getElementById("textarea") as HTMLTextAreaElement;
    const localStorageKeyOmdb = "omdb-key";

    const omdbkeyinput = document.getElementById(
        "omdb-key",
    ) as HTMLInputElement;
    omdbkeyinput.addEventListener("change", (event) => {
        localStorage.setItem(
            localStorageKeyOmdb,
            (event.target as HTMLInputElement).value.trim(),
        );
    });
    omdbkeyinput.value = localStorage.getItem(localStorageKeyOmdb) || "";

    const imdbidregex = new RegExp("^tt[0-9]+$");

    const input = document.getElementById("omdb-search") as HTMLInputElement;
    input.addEventListener("change", async (event) => {
        const imdbid = (event.target as HTMLInputElement).value.trim();
        if (!imdbid.match(imdbidregex)) {
            output.textContent = "not an imdb id";
            return;
        }
        output.textContent = "loading...";

        const response = await fetch(
            `https://www.omdbapi.com/?i=${imdbid}&apikey=${omdbkeyinput.value}`,
        );
        if (response.status != 200) {
            output.textContent = `API error, did you input a valid API key?\nHTTP status: ${response.status}`;
            return;
        }

        const movie = await response.json();
        const apiresponse = movie["Response"] || "False";
        if (apiresponse == "False") {
            const error = movie["Error"] || "unkown error";
            output.textContent = "API error: " + error;
            return;
        }
        const releaseDate = new Date(movie["Released"] + " UTC")
            .toISOString()
            .split("T")[0];

        const ret = {
            englishTitle: movie["Title"],
            director: movie["Director"].split(",").map((g: string) => g.trim()),
            imdbID: movie["imdbID"],
            releaseYear: parseInt(movie["Year"]),
            releaseDate: releaseDate,
            runtime: parseInt(movie["Runtime"]),
            ageCertification: movie["Rated"],
            genres: movie["Genre"]
                .split(",")
                .map((g: string) => g.trim().toLowerCase()),
        };

        output.textContent = JSON.stringify(ret, null, 2) + ",";
    });
</script>
