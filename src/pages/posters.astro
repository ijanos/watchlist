---
import Layout from "../layouts/Layout.astro";
import { movies } from "../data/movies.ts";
---

<Layout title="posters | Janos' watchlist">
    <div x-data="posters">
        <dialog x-ref="dialog" class="p-2 border-4 rounded-md border-amber-300 min-w-[20em]">
            <div class="flex gap-2 min-w-96 flex-col">
                <p x-text="selectedMovie['title']" class="py-2 font-bold text-xl"></p>
                <div class="flex">
                <img x-bind:src="selectedMovie['posterURL']" />
                <div class="flex flex-col gap-2">
                    <p>Release:
                        <span x-text="selectedMovie['release']"/>
                    </p>
                    <form method="dialog">
                        <button>OK</button>
                    </form>
                </div>
                </div>
            </div>
        </dialog>

        <div class="flex justify-between flex-wrap drop-shadow-md">
            <input
                type="text"
                x-on:input="search = $el.value.toLowerCase()"
                class="grow p-1 my-1 text-gray-900 border border-black rounded-l-lg bg-amber-300"
                placeholder="search"
            />

            <div class="inline-flex grow lg:grow-0">
                <button
                    class="border border-1 border-black border-l-0 bg-amber-300 text-sm hover:bg-amber-500 text-gray-800 my-1 px-1 grow lg:grow-0"
                    @click="reorder('release')"
                >
                    release date
                </button>
                <button
                    class="border border-1 border-black border-l-0 bg-amber-300 text-sm hover:bg-amber-500 text-gray-800 my-1 px-1 rounded-r-lg grow lg:grow-0"
                    @click="reorder('alphabetical')"
                >
                    alphabetical
                </button>
            </div>
        </div>

        <div
            x-ref="grid"
            class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 2xl:grid-cols-5 gap-4 p-2 items-center justify-items-center"
        >
            {
                movies.map((movie) => (
                        <img
                            x-show="$el.dataset.search.includes(search)"
                            class="w-60 h-auto rounded-lg shadow-xl transition ease-in-out hover:scale-105"
                            title={movie.englishTitle}
                            src={`/poster/${movie.imdbID}.jpg`}
                            alt={`Poster for ${movie.englishTitle}`}
                            data-releasedate={movie.releaseDate}
                            data-search={`${ movie.englishTitle } ${movie.director.join(" ")} ${ movie.originalTitle || '' }`.toLowerCase()}
                            loading="lazy"
                            @click="showModal"
                        />
                    ))
            }
        </div>
    </div>
</Layout>

<script>
import Alpine from 'alpinejs';

document.addEventListener('alpine:init', () => {
    Alpine.data('posters', () => ( {
            search: "",
            selectedMovie: { title: "", release: "", posterURL: "" },
            sortOrder: -1,
            reorder(sorter: string) {
                this.getPosters()
                    .sort(this.getSortFn(sorter))
                    .forEach((img) => {
                        this.$refs.grid.appendChild(img);
                    });
            },
            getPosters() {
                return Array.from(this.$refs.grid.querySelectorAll("img"));
            },
            showModal($event: Event) {
                this.selectedMovie = {
                    title: ($event?.target as HTMLImageElement).title,
                    release: ($event?.target as HTMLImageElement).dataset.releasedate as string,
                    posterURL: ($event?.target as HTMLImageElement).src
                };
                (this.$refs.dialog as HTMLDialogElement).showModal();
            },
            getSortFn(name: string) {
                switch (name) {
                    case "alphabetical":
                        this.sortOrder = this.sortOrder * -1;
                        return (a: HTMLImageElement, b: HTMLImageElement) => { return this.sortOrder * a.title.localeCompare(b.title); }
                    case "release":
                        this.sortOrder = this.sortOrder * -1;
                        return  (a: HTMLImageElement, b: HTMLImageElement) => { return this.sortOrder * (a.dataset.releasedate as string).localeCompare(b.dataset.releasedate as string); }
                }
            },
        }
    ))
})

Alpine.start();
</script>
